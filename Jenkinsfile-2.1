pipeline {
    agent{
        node {
            label 'docker'
        }
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/hawk-H97/potential-giggle-basic-html', branch: 'feature'
            }
        }
        stage('Build') {
            steps {
                sh '''
                docker run -dit --name node-test -v $WORKSPACE:/workspace -w /workspace node bash
                docker exec node-test bash -c "npm install htmlhint stylelint && echo 'Dependencies installed'"
                '''
            }
        }
        stage('Security Scan (audit-ci)') {
            steps {
                sh '''
                docker run --rm \
                -v $WORKSPACE:/workspace \
                -w /workspace \
                node \
                bash -c "npm install && npx audit-ci --high"
                '''
            }
        }
        stage('Test') {
            steps {
                sh '''
                docker exec node-test bash -c "npx htmlhint *.html || true"
                docker exec node-test bash -c "npx stylelint *.css || true"
                '''
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sq1') {
                    sh '''
                    docker run --rm \
                    -v $WORKSPACE:/workspace \
                    -w /workspace \
                    -e SONAR_HOST_URL=$SONAR_HOST_URL \
                    -e SONAR_TOKEN=$SONAR_AUTH_TOKEN \
                    sonarsource/sonar-scanner-cli:latest \
                    sonar-scanner \
                    -Dsonar.projectKey=Barber_website \
                    -Dsonar.projectName=Barber_website \
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                sh '''
                docker build -t frontend:1.0 .
                '''
            }
        }
        stage('Trivy Security Scan') {
            steps {
                sh '''
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy image frontend:1.0
                '''
            }
        }
        stage('OWASP ZAP Scan') {
            steps {
                sh '''
                docker network create zap-net || true

                docker run -d --name my-website --network zap-net -p 8080:80 frontend:1.0

                docker run --rm --network zap-net \
                owasp/zap2docker-stable zap-full-scan.py -t http://my-website:80 -r zap-report.html || true
                '''
            }
        }
    }
    post {
        always {
            sh 'docker stop node-test && docker rm node-test || true'
            sh 'docker network rm zap-net || true'
            sh 'docker stop my-website && docker rm my-website || true'
            archiveArtifacts artifacts: 'zap-report.html', fingerprint: true
        }
        
    }
}